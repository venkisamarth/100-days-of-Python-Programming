# -*- coding: utf-8 -*-
"""Day20 Functions in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JoRVr6sT1vdo138gk34uYe3N64EJGNoY

Functions in Python
In Python, a function is a reusable block of code that performs a specific task or set of tasks. Functions are used to organize code into manageable and modular pieces, making it easier to understand, maintain, and reuse. The purpose of functions in Python is to encapsulate a set of instructions, allowing you to call and execute those instructions whenever needed.

Funciton Defination:
To defin the a function in python, you use the def keyword followed by the function name,parameters(if any) , and a colon the function body is indented below the defination.
"""

def my_function(parameter1, parameter2):
    # Function body
    # ...
    return result

"""Function call: once a function is defined , you can call it by using its name followed by parameterses, passing any require arguments."""

result = my_function(value1, value2)

"""Return statment: function can return values using the 'return statment The returnd value can be assigned to a varible to a variable when the finction is called."""

def add_numbers(a,b):
  return a+b
sum_result=add_numbers(3,4)

"""Types of Functions:


Built-in Functions: These are functions that are already defined in Python and can be directly used without the need for explicit definition. Examples include print(), len(), max(), and min().

User-Defined Functions: These are functions defined by the user to perform a specific task. The examples given in the previous points are user-defined functions.

Lambda Functions: Also known as anonymous functions, these are defined using the lambda keyword. They are often used for short, one-time operations.
"""

square =lambda x: x**2
result=square(5)

print(result)

"""REsursive Functions:
 A REcursive that calls itself during its executaions is called recursive finctions are used to solve problems that can be broken down into smaller sub-problems
"""

def factorail(n):
  if n==0 or n==1:
    return 1
  else:
    return n * factorail(n-1)

factorail(5)

"""Higher order Functions: Functions that take other functions as argumentes return functions are know as higher-order functions These functions provide a poweful way to work with fucnios as data"""

def apply_operation(operation, a,b):
  return operation(a,b)
def add(x,y):
  return x+y
result = apply_operation(add,3,4)

"""Built-in Fuctions in Python along with examples:

"""

print("Hello,World!")

my_list=[1,2,3,4,5]
length=len(my_list)
print(length)

#input()
user_input=input("Enter your name:")
print(user_input)

#type():
value_type=type(10)

print(type(10))

#range()
my_range=range(1,10,2)

my_range=range(1,10,2)

print(my_range)

numbers = [1, 2, 3, 4, 5]
total = sum(numbers)

# max():
maximum=max(4,7,2,9)

# min()
maximum=min(4,7,2,9)
print(maximum)

# absolute _value=abs(-10)
absolut_value=abs(-10)

print(absolut_value)

# sorted():
my_list=[4,55,6,2,4,6,7,8,89]
sorted_list=sorted(my_list)

# str()
string_value=str(42)
print(string_value)

#int()
integer_value=int("42")
print(integer_value)

flaot_value=float("3.14")
print(flaot_value)

# list():
my_string = "hello"
char_list = list(my_string)

my_list=[1,2,3]
my_tuple=tuple(my_list)
print(my_tuple)

key_value_pairs = [("a", 1), ("b", 2)]
my_dict = dict(key_value_pairs)
print(my_dict)

# set():
my_list=[1,2,3,4,5]
my_set=set(my_list)

print(my_list)

print(my_set)

# chr():
# Example:
character=chr(65)
print(character)

ascii_value=ord("A")
print(ascii_value)

"""user-defined functions in python"""

# Simple Addition Functions:
def add_numbers(a,b):
  return a+b
add_numbers(2,4)

#multiplcation Functions(a,b):
def multiplcation_numbers(a,b):
  return a*b
multiplcation_numbers(2,4)

#Power Fucntion:
def power(base,exponent):
  return base**exponent
power(5,6)

# factorail of a number
def factorail(n):
  if n==0 or n==1:
    return 1
  else:
    return n * factorail(n-1)

factorail(5)

# check Even or Odd:
def is_even(number):
  return number%2==0
is_even(5)

# maximum ot three Numbers:
def max_of_three(a,b,c):
  return max(a,b,c)
max_of_three(1,2,3)

# Palindrom check:
def is_palindrom(s):
  return s==s[::-1]

is_palindrom("vvenkatesh")

# sum elements:
def sum_list(numbers):
  return sum(numbers)
sum_list([1,2,3,4,5])

# avarage of List Elements:
def average_list(numbers):
    return sum(numbers) / len(numbers) if len(numbers) > 0 else 0

average_list([1,3,4,5,6])

# Reverse string:
def reverse_string(s):
  return s[::-1]

reverse_string("venki")

# check is_prime(numebr):
def is_prime(number):
    if number < 2:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

# List Concatinations:
def concatenate_list(list1,list2):
  return list1 + list2

list1=[1,2,3,4,5]
list2=[2,3,4,5,56]
concatenate_list(list1,list2)

# count  vowels in a string:
def count_vowels(s):
  return sum( 1 for char in s if char.lower() in "aeiou")

count_vowels("venkatesh")

# fibonacci Sequence(n)
def fibonacci(n):
  fib_sequence=[0,1]
  while len(fib_sequence)<n:
    fib_sequence.append(fib_sequence[-1]+fib_sequence[-2])
  return fib_sequence

# check Anagram:
def is_anagram(s1,s2):
  return sorted(s1)==sorted(s2)

# Linrer Search:
def linear_search(arr,target):
  for i , element in enumerate(arr):
    if element==target:
      return i
    return -1

# Quadratic Equation Solver:
def quadratic_solver(a,b,c):
  discriminant=b**2 -4*a*c
  if discriminant <0:
    return None
  else:
    root1 = (-b + (discriminant**0.5)) / (2*a)
    root2 = (-b - (discriminant**0.5)) / (2*a)
    return root1, root2

# Capitalize first Letter of Each World:
def capitalize_words(s):
    return ' '.join(word.capitalize() for word in s.split())

# check Leap year:
def is_leap_year(year):
    return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)

# python
# Copy code
def calculate_bmi(weight, height):
    return weight / (height ** 2)

