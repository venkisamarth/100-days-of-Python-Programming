# -*- coding: utf-8 -*-
"""day46os Module in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qV9Hm0EF-E_qUOGOGkqz7ihSwJtJTxAi

OS module in python
the os module provides a way to interact with the operating system. It allows you to perform various operating system-related tasks such as file and directory operations, process management, and more. Here are some of the commonly used functions and features of the os module:

1. File and directory Operations:
* os.getcwd(): Returns the current working directory as a string.
* os.chdir(path): Changes the current working directory to the specified path.
* os.listdir(path='.'): Returns a list of names of entries in the given directory.
* os.mkdir(path): Creates a new directory at the specified path.
* os.makedirs(path): Creates a new directory and its parent directories if they don't exist.

2 Path Manipulation:

* os.path.join(path, *paths): Join one or more path components intelligently.
* os.path.abspath(path): Returns the absolute version of a path.
* os.path.exists(path): Returns True if the path exists, otherwise False.
* os.path.isfile(path): Returns True if the path is a regular file, otherwise False.
* os.path.isdir(path): Returns True if the path is a directory, otherwise False.

4 Envirnoment Variables:
* os.environ: A dictionary containing the environment variables.
* os.getenv(varname, default=None): Get the value of the environment variable named varname or a default value if it doesn't exist.

5. File and Directory Information:
* os.stat(path): Get the status of a file or a file descriptor.
* os.remove(path): Remove a file.
* os.rmdir(path): Remove the directory at the specified path.

6 Milscellaneous:
* os.name: The name of the operating system dependent module imported. For example, 'posix' for Linux, Unix, or 'nt' for Windows.
* os.system(command): Execute the command (a string) in a subshell.
"""

# Get curent working directory
import os
current_dir=os.getcwd()
print("Currnet working directory:", current_dir)

# list files in the current directory
files=os.listdir()
print("Files in Current Directory:", files)

# check if a path is directory
path_to_check="some_directory"
if os.path.isdir(path_to_check):
  print(f"{path_to_check} is a direcotory.")
else:
   print(f"{path_to_check} is not a directory.")

if(not os.path.exists("data")):
    os.mkdir("data")

for i in range(1,100):
    os.mkdir(f"data/Day{i+1}")

import os
for i in range(1,100):
    os.rename(f"data/Day{i+1}",f"data/Tutorail {i+1}")

import os
folders=os.listdir("data")
print(folders)

for folders in folders:
    print(folders)
    print(os.listdir(f"data/{folders}"))
print(os.getcwd())
print(os.getcwd())

# Get current Working Directory
current_dir=os.getcwd()
print("Current Working Directory:", current_dir)

files =os.listdir()
print("Files in current directory:", files)

# create  a directory
import os
new_directory="EXample_directory"
os.mkdir(new_directory)
print(f"Directory '{new_directory}' created.")

# Check  if the path is a directory or not
import os
path_to_check="example_directory"
if os.path.isdir(path_to_check):
  print(f"{path_to_check} is a directory.")
else:
  print(f"{path_to_check} is not a directory.")

import os
base_path="/home/user"
subfolder="documents"
file_name="example.txt"

full_path=os.path.join(base_path, subfolder,file_name)
print("joined Path:",full_path)

#Execute shell command
command="ls -1"
os.system(command)

