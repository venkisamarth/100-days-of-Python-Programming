# -*- coding: utf-8 -*-
"""day48 local and the global variable in python .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VNFlB6TKXRawVd3nvJYZHIw-iZBGltNA

Local Variable  and the Global variable in python

Before we dive into the differences between local and global variables, let's first recall what a variable is in Python.

A variable is a named location in memory that stores a value. In Python, we can assign values to variables using the assignment operator =. For example:
"""

x=5
#y="Hello, World!"

"""Now, let's talk about local and global variables.

A local variable is a variable that is defined within a function and is only accessible within that function. It is created when the function is called and is destroyed when the function returns.

On the other hand, a global variable is a variable that is defined outside of a function and is accessible from within any function in your code.

Here's an example to help clarify the difference:
"""

x=10 # globle variable
def my_function():
  y=5
  print(y)
my_function()
print(x)
print(y)

"""In this example, we have a global variable x and a local variable y. We can access the value of the global variable x from within the function, but we cannot access the value of the local variable y outside of the function.

The  global keyword

Now, what if we want to modify a global variable from within a function? This is where the global keyword comes in.

The global keyword is used to declare that a variable is a global variable and should be accessed from the global scope. Here's an example:
"""

x=10
def my_function():
  global x
  x=5 # this will change the value of the global variable x
  y=5
my_function()
print(x)
print(y)

"""In this example, we used the global keyword to declare that we want to modify the global variable x from within the function. As a result, the value of x is changed to 5.

It's important to note that it's generally considered good practice to avoid modifying global variables from within functions, as it can lead to unexpected behavior and make your code harder to debug.

I hope this tutorial has helped clarify the differences between local and global variables and how to use the global keyword in Python. Thank you for watching!
"""

global_var=10
def print_global():
  print("global Varaible:", global_var)
print_global()

# global varaible inside the function:
def set_global():
  global global_var
  global_var =20
set_global()
print("Global Varaible:", global_var)

# global lsit varaible:
global_list=[1,2,3,4,5]
def modify_global_list():
  global_list.append(4)
modify_global_list()
print("Global List Varaible:", global_list)

# Global varaible in module:
global_var=30
from module import global_var
print("Global VAraible from Module:", global_var)

# Global varaible in Class:
class MyClass:
  global_var=40
obj=MyClass()
print("Global Variable in Class:", obj.global_var)

# simple local variable
def example_function():
  local_var=10
  print("Local VAraible:", local_var)
example_function()

# Local Variable in a loop :
def loop_example():
  for i in range(5):
    loop_var=i
  print("Last VAlue in loop:", loop_var)
loop_example()

from re import T
# local  varaible inside the condition:
def condition_example(value):
  if value >0:
    positive_var=True
  else:
    positive_var=False
  print("Positive Variable:", positive_var)
condition_example(10)

# Local in nested function:
def outer_function():
  outer_var=60
  def inner_function():
    print("inner Varaible:", outer_var)
  inner_function()
outer_function()

# Local Varaible shadowing:
global_var=70
def shadow_example():
  global_var=80
  print("Local Varaible shadowing  Global VAraible:", global_var)
shadow_example()
print("Global Varaible:", global_var)

