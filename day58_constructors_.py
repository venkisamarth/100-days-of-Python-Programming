# -*- coding: utf-8 -*-
"""day58 constructors .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PgQEs2-z7zL4yYZJ-kl2O2o7HxxDQ5AR

A constructor is a special method in a class to create and initialize  an object of a class . There are diffreent types of constructors .Constructo is invoked automatically when an object of a class is created.

A constructor is a unique function that gets called automatically wheen an object is created of a class , The main purpos of a constructor is to intialize or assign values to the data memebers of that calss. It cannot return any valu other thatn None.
"""

def __init__(self):
	# initializations

"""iniit is one of the reserved fucntions in python.In objec oriented programming. it is know as a constructors.



init is one of the reserved functions in Python. In Object Oriented Programming, it is known as a constructor.

Types of Constructors in Python
Parameterized Constructor
Default Constructor
Parameterized Constructor in Python
When the constructor accepts arguments along with self, it is known as parameterized constructor.

These arguments can be used inside the class to assign the values to the data members.
"""

class Details:
    def __init__(self, animal, group):
        self.animal = animal
        self.group = group

obj1 = Details("Crab", "Crustaceans")
print(obj1.animal, "belongs to the", obj1.group, "group.")

class MyClass:
    def __init__(self):
        print("Constructor called")

# Creating an object triggers the constructor
obj1 = MyClass()  # Output: Constructor called

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

# Creating objects with parameters passed to the constructor
person1 = Person("Alice", 25)
person2 = Person("Bob", 30)

print(person1.name, person1.age)  # Output: Alice 25
print(person2.name, person2.age)  # Output: Bob 30

class Rectangle:
    def __init__(self, length=0, width=0):
        self.length = length
        self.width = width

# Creating objects with and without specifying parameters
rect1 = Rectangle(5, 3)
rect2 = Rectangle()

print(rect1.length, rect1.width)  # Output: 5 3
print(rect2.length, rect2.width)  # Output: 0 0

class Car:
    def __init__(self, make, model, year=2023):
        self.make = make
        self.model = model
        self.year = year

# Creating objects with and without specifying the 'year' parameter
car1 = Car("Toyota", "Camry")
car2 = Car("Honda", "Civic", 2022)

print(car1.year)  # Output: 2023 (default value)
print(car2.year)  # Output: 2022

class Student:
    university = "My University"  # Class variable

    def __init__(self, name, student_id):
        self.name = name  # Instance variable
        self.student_id = student_id

# Creating objects and accessing instance and class variables
student1 = Student("Alice", 12345)
student2 = Student("Bob", 67890)

print(student1.name, student1.university)  # Output: Alice My University
print(student2.student_id, student2.university)  # Output: 67890 My University

