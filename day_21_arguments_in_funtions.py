# -*- coding: utf-8 -*-
"""Day 21  Arguments in funtions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-ZrsrgJeku-3ZieBz_DLPeZm-JQlbZjm

Arguments

In Python, arguments are the values that are passed to a function or a method when it is called. There are several types of arguments, and they are categorized based on how they are passed and used in a function. The main types of arguments are:

Positional Arguments
"""

def add_numbers(a,b):
  return a+b
result = add_numbers(3,5)
print(result)

# Concatenate String:
def concatenate_string(first_name,last_name):
  return f"{first_name}{last_name}"
full_name=concatenate_string("John","doe")

print(full_name)

# Calculating Area of Rectangle:
def calculating_recatangle_are(length,width):
  return length*width
area = calculating_recatangle_are(5,4)

# Exponential Function:
def power(base,exponent):
  return base** exponent
result=power(2,3)
print(result)

# Dilsply the Inforamtion
def disply_ino(name,age,city):
  print(f"Name:{name},age:{age},city:{city}")
disply_ino("Alice",25,"London")

"""keyword Arguments"""

# Disply the inforamtion:
def disply_ino(name,age,city):
  print(f"name:{name},age:{age},city:{city}")
disply_ino(name="Alice",age=21,city="London")

# Formating a Date:
def format_date(day,month,year):
  return f"{day:02d}/{month:02d}/{year}"
formatted_date= format_date(day=8,month=12,year=2023)
print(formatted_date)

# calculating Coompund interst:
def compund_iterest(principal,rate ,time):
  return principal*(1+rate)**time
result=compund_iterest(principal=1000,rate=0.05,time=3)
print(result)

# creating  a point in 2D space:
def create_point(x,y):
  return {"x":x,"y":y}
point=create_point(x=3,y=7)
print(point)

def calculate_rectangle_area(length, width):
    return length * width

area = calculate_rectangle_area(4, 6)
print(area)

"""Default Arguments in python"""

def power(base,exponent=2):
  return base**exponent
result_default =power(3)
result_custom =power(3,4)
print(result_default)
print(result_custom)

# Greating with default Message:
def greet(name,message="Hello"):
  return f"{message},{name}!"
greeting_default =greet("Alice")
greeting_cutom =greet("Bob","Good Morning")
print(greeting_cutom)

# Concatenating Strings with Default Separator
def concatenate_string(strings,separator=",  "):
  return separator.join(strings)
result_default = concatenate_string(["apple","bababa","orange"])
result_custom = concatenate_string(["apple","banana","range"])
print(result_default)
print(result_custom)

# Displaying Information with default Value:
def disply_info(name,age,city="Unknow"):
  print(f"Name:{name},Age:{age},City:{city}")
disply_info("Alice",25)
disply_info("Bob",30,"new York")

def format_date(day, month, year, date_format="%Y-%m-%d"):
    return f"{year}-{month:02d}-{day:02d}"

formatted_default = format_date(8, 12, 2023)
formatted_custom = format_date(8, 12, 2023, "%d/%m/%Y")

print(formatted_default)  # Output: 2023-12-08
print(formatted_custom)

"""varibel-length Positional arguments"""

def sum_all(*numbers):
  return sum(numbers)
result=sum_all(1,2,3,4,5)
print(result)

def concatenate_strings(*strings):
    return " ".join(strings)

result = concatenate_strings("Hello", "World", "Python", "Programming")
print(result)  # Output: Hello World Python Programming

# finding the Maximum of Variable numbers:
def find_max(*values):
  return max(values)
result=find_max(10,5,8,15,3)
print(result)

# Calculating Average of Variable Numbers:
def calculate_average(*numbers):
    return sum(numbers)/len(numbers) if len(numbers)>0 else 0
result = calculate_average(10,20,30,40,50)
print(result)

# Display Inforamation with Variable Arguments:
def display_info(*info):
  for item in info:
    print(item)
display_info("John",25,"New York","Software Engineer")

"""Requaired  arguments in python"""

def add_numbers(a,b):
  return a+b
result =add_numbers(3,5)
print(result)

#  greeting Function
def greet(name):
  return f"Hello, {name}!"
greeting =greet("Alice")
print(greeting)

# Rectangle Area Function:
def  calculate_recatange_area(length,width):
  return length * width
area = calculate_recatange_area(4,6)
print(area)

#Power Fucntion
def power(base,exponent):
  return base ** exponent
result = power(2,3)
print(result)

# display Inforamtion Funcation:
def display_info(name,age,city):
  print(f"Name:{name},age:{age},city:{city}")
display_info('Alice',25,"londan")

