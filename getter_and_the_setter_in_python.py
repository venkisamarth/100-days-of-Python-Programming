# -*- coding: utf-8 -*-
"""getter and the setter in python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19wrB1qa_QZM0cZfviLuNAPmlZOxGsNJr
"""

class Rectangle:
    def __init__(self, width, height):
        self._width = width
        self._height = height

    # Getter method for width
    @property
    def width(self):
        return self._width

    # Setter method for width
    @width.setter
    def width(self, value):
        if value > 0:
            self._width = value
        else:
            print("Width must be greater than 0.")

    # Getter method for height
    @property
    def height(self):
        return self._height

    # Setter method for height
    @height.setter
    def height(self, value):
        if value > 0:
            self._height = value
        else:
            print("Height must be greater than 0.")

    def area(self):
        return self._width * self._height

# Creating an instance of the Rectangle class
rectangle = Rectangle(width=5, height=10)

# Using the getter methods to retrieve values
print("Width:", rectangle.width)   # Output: Width: 5
print("Height:", rectangle.height)  # Output: Height: 10

# Using the setter methods to update values
rectangle.width = 8
rectangle.height = 15

# Using the getter methods again to retrieve updated values
print("Updated Width:", rectangle.width)   # Output: Updated Width: 8
print("Updated Height:", rectangle.height)  # Output: Updated Height: 15

# Attempting to set invalid values
rectangle.width = -5  # Output: Width must be greater than 0.
rectangle.height = 0  # Output: Height must be greater than 0.

# Calculating the area after updates
print("Area:", rectangle.area())  # Output: Area: 120

"""in
In Python, a getter is a method or function that allows you to access the value of an object's attribute. It provides a way to retrieve the value of a private or protected attribute without directly accessing it. The purpose of using getters is to encapsulate the internal representation of an object and to provide controlled access to its attributes.

In Python, getters are often implemented using the @property decorator. The @property decorator allows you to define a method that can be accessed like an attribute, without the need for explicit function call syntax.
"""

class Circle:
    def __init__(self, radius):
        self._radius = radius  # Private attribute

    # Getter method using the @property decorator
    @property
    def radius(self):
        return self._radius

# Creating an instance of the Circle class
my_circle = Circle(radius=5)

# Accessing the radius attribute using the getter method
print(my_circle.radius)

result=4 & 4
print(result)

