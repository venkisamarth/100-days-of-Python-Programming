# -*- coding: utf-8 -*-
"""lists in Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_9gKqcv8mPLK9G7jA01cTbq6SAp0fuER

Lists

A list in python a varsatile and mutable orderd sequence of elements.  Lists are defined  by enclosing elements in square breakets [ ] and elements within the list can be  of diffrent data types. Lists allow for easy and manipulation,iteration and  modification of data.

Lists are ordered collections of elements.

Elements in a list can be of different data types, including integers, strings, or even other lists.

Lists are mutable, meaning you can modify them by adding, removing, or modifying elements.
Lists are zero-indexed, meaning the index of the first element is 0, the second element is 1, and so on.
"""

# creating the list:
my_list=[1,2,3,4,5]
print(my_list)

# accessing Elements:
fruits=["apple","orange","bababa"]
print(fruits[0])

# modifying Elements:

numbers=[1,2,3,4,5]
numbers[2]=10
print(numbers)

# Appending the elements :
colors=["red","yellow","blue"]
colors.append("green")
print(colors)

# concatinating  Lists:
list1=[1,2,3,4,5]
list2=[4,5,7,8]
combined_list=list1+list2
print(combined_list)

#Removibng Elements:
animals=['dog',"cat","rabbit"]
animals.remove("cat")
print(animals)

# slicing   a lsit:
numbers = [1, 2, 3, 4, 5]
sliced_list = numbers[1:4]
print(sliced_list)

# List Lenght:
fruit=["apple","orange","banana"]
length=len(fruits)
print(length)

# Nested Lists:
matrix=[[1,2,3],[4,5,6,7],[7,8,9]]
print(matrix[1][2])

# list comprehension:
squares =[x**2 for x in range(5)]
print(squares)

"""ways of creating the list in the python"""

# using the square Brackets:
my_list=[1,2,3,4,5,6]
print(my_list)

# using the list() constructor:
my_list=list(range(1,6))
print(my_list)

# List comprehension:
my_list=[x for x in range(1,6)]
print(my_list)

# using append() method:
my_list=[]
for i in range(1,6):
  my_list.append(i)
print(my_list)

# using the extend() method:
my_list=[]
my_list.extend(range(1,6))
print(my_list)

# using the Repetition Operator:
my_list=[0]*5
print(my_list)

# using the split() method on a string
my_string ='1,2,3,4,5'
my_list=my_string.split()
print(my_list)

# using map() function:
my_list = list(map(int, input("Enter space-separated numbers: ").split()))
print(my_list)



# using copy() method:
original_list=[1,2,3,4,5]
my_list=original_list.copy()
print(my_list)

# using List slicing:
my_list=list(range(1,11))[::2]
print(my_list)

# 1 Indexing
my_list=[10,20,30,40,50]
element=my_list[2]
print(element)

# negetive Indexing:
my_list=[10,20,30,40,50]
element=my_list[-1]
print(element)

# slicing :
my_list = [10, 20, 30, 40, 50]
subset = my_list[1:4]
print(subset)

# using a loop:
my_list=[10,20,30,40,50]
for element in my_list:
  print(element)

# enumerate Elements:
my_list=[10,20,30,40,50]
for index,element in enumerate(my_list):
  print(f"Index {index}:{element}")

# using the len() function:
my_list=[10,20,30,40,50]
for i in range(len(my_list)):
  print(my_list[i])

# cheking membership with in:
my_list=[10,20,30,40,50]
if 30 in my_list:
  print("30 is present in the list.")

# Using index() Method:
my_list=[10,20,30,40,50]
index=my_list.index(40)
print(f"Index of 40: {index}")

# Accessing Multiple Elements with Stride:
# python
# Copy code
my_list = [10, 20, 30, 40, 50]
subset = my_list[::2]
print(subset)

# Using List Comprehension:
my_list = [10, 20, 30, 40, 50]
filtered_list = [x for x in my_list if x > 30]
print(filtered_list)

